name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Kronos Compute ${{ github.ref }}
          
          High-Performance Compute-Only Vulkan Implementation
          
          ### Features
          - Zero descriptor updates per dispatch
          - â‰¤0.5 barriers per dispatch  
          - 30-50% reduction in CPU submit overhead
          - Zero memory allocations in steady state
          
          ### Installation
          ```toml
          [dependencies]
          kronos-compute = "${{ github.ref_name }}"
          ```
          
          See the [README](https://github.com/LynnColeArt/kronos-compute) for usage instructions.
        draft: false
        prerelease: false

  build-artifacts:
    name: Build Artifacts
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: libkronos_compute.so
            asset_name: libkronos_compute-linux-amd64.so
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: kronos_compute.dll
            asset_name: kronos_compute-windows-amd64.dll
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install Vulkan SDK (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
        sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.3-jammy.list https://packages.lunarg.com/vulkan/1.3/lunarg-vulkan-1.3-jammy.list
        sudo apt update
        sudo apt install -y vulkan-sdk
    
    - name: Install Vulkan SDK (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/latest/windows/vulkan-sdk.exe" -OutFile VulkanSDK.exe
        Start-Process -Wait -FilePath VulkanSDK.exe -ArgumentList "/S"
    
    - name: Build
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream

  publish-crate:
    name: Publish to crates.io
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Publish
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}